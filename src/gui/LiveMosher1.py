#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Nov 04, 2024 04:29:04 PM CET  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_location = os.path.dirname(__file__)

import LiveMosher1_support

_bgcolor = 'gray82'
_fgcolor = 'black'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: return        
    try: LiveMosher1_support.root.tk.call('source',
                os.path.join(_location, 'themes', 'waldorf.tcl'))
    except: pass
    style = ttk.Style()
    style.theme_use('waldorf')
    style.configure('.', font = "TkDefaultFont")
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("947x661+499+246")
        top.minsize(120, 1)
        top.maxsize(2564, 1061)
        top.resizable(0,  0)
        top.title("Toplevel 0")
        top.configure(background="gray82")
        top.configure(highlightbackground="gray82")
        top.configure(highlightcolor="black")

        self.top = top
        self.is_auto_rename = tk.IntVar()
        self.is_mute = tk.IntVar()

        self.menubar = tk.Menu(top,font="TkMenuFont",bg='gray82',fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.label_saving = tk.Label(self.top)
        self.label_saving.place(x=370, y=140, height=21, width=50)
        self.label_saving.configure(activebackground="#d9d9d9")
        self.label_saving.configure(activeforeground="black")
        self.label_saving.configure(anchor='w')
        self.label_saving.configure(background="gray82")
        self.label_saving.configure(compound='left')
        self.label_saving.configure(disabledforeground="#9d9d9d")
        self.label_saving.configure(font="-family {Arial} -size 9")
        self.label_saving.configure(foreground="black")
        self.label_saving.configure(highlightbackground="gray82")
        self.label_saving.configure(highlightcolor="black")
        self.label_saving.configure(text='''Saving...''')

        _style_code()
        self.scrolledtext_script_editor = ScrolledText(self.top)
        self.scrolledtext_script_editor.place(x=221, y=166, height=327
                , width=717)
        self.scrolledtext_script_editor.configure(background="#ffffff")
        self.scrolledtext_script_editor.configure(font="-family {Courier New} -size 9")
        self.scrolledtext_script_editor.configure(foreground="black")
        self.scrolledtext_script_editor.configure(highlightbackground="gray82")
        self.scrolledtext_script_editor.configure(highlightcolor="black")
        self.scrolledtext_script_editor.configure(insertbackground="black")
        self.scrolledtext_script_editor.configure(insertborderwidth="3")
        self.scrolledtext_script_editor.configure(maxundo="9999")
        self.scrolledtext_script_editor.configure(padx="3")
        self.scrolledtext_script_editor.configure(pady="2")
        self.scrolledtext_script_editor.configure(selectbackground="#d9d9d9")
        self.scrolledtext_script_editor.configure(selectforeground="black")
        self.scrolledtext_script_editor.configure(tabstyle="wordprocessor")
        self.scrolledtext_script_editor.configure(undo="1")
        self.scrolledtext_script_editor.configure(wrap="none")

        self.button_open_project = ttk.Button(self.top)
        self.button_open_project.place(x=243, y=8, height=24, width=49)
        photo_location = os.path.join(_location,"./icons/open.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.button_open_project.configure(image=_img0)
        self.button_open_project.configure(compound='center')

        self.button_select_video = ttk.Button(self.top)
        self.button_select_video.place(x=300, y=39, height=24, width=49)
        photo_location = os.path.join(_location,"./icons/open.png")
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.button_select_video.configure(image=_img1)
        self.button_select_video.configure(compound='center')

        self.button_edit_script = ttk.Button(self.top)
        self.button_edit_script.place(x=374, y=138, height=24, width=60)
        self.button_edit_script.configure(text='''Edit''')
        self.button_edit_script.configure(compound='left')

        self.Label1 = tk.Label(self.top)
        self.Label1.place(x=12, y=10, height=22, width=54)
        self.Label1.configure(activebackground="#d9d9d9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="gray82")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#9d9d9d")
        self.Label1.configure(font="-family {Segoe UI} -size 8")
        self.Label1.configure(foreground="black")
        self.Label1.configure(highlightbackground="gray82")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Project''')

        self.Label3 = tk.Label(self.top)
        self.Label3.place(x=18, y=40, height=21, width=46)
        self.Label3.configure(activebackground="#d9d9d9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="gray82")
        self.Label3.configure(compound='left')
        self.Label3.configure(disabledforeground="#9d9d9d")
        self.Label3.configure(font="-family {Segoe UI} -size 8")
        self.Label3.configure(foreground="black")
        self.Label3.configure(highlightbackground="gray82")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Video''')

        self.Label4 = tk.Label(self.top)
        self.Label4.place(x=11, y=70, height=21, width=52)
        self.Label4.configure(activebackground="#d9d9d9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(anchor='w')
        self.Label4.configure(background="gray82")
        self.Label4.configure(compound='left')
        self.Label4.configure(disabledforeground="#9d9d9d")
        self.Label4.configure(font="-family {Segoe UI} -size 8")
        self.Label4.configure(foreground="black")
        self.Label4.configure(highlightbackground="gray82")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Output''')

        self.entry_video_input = ttk.Entry(self.top)
        self.entry_video_input.place(x=60, y=38, height=25, width=234)
        self.entry_video_input.configure(font="-family {Arial} -size 9")
        self.entry_video_input.configure(cursor="xterm")

        self.entry_video_output = ttk.Entry(self.top)
        self.entry_video_output.place(x=60, y=68, height=25, width=234)
        self.entry_video_output.configure(font="-family {Arial} -size 9")
        self.entry_video_output.configure(cursor="xterm")

        self.button_play_script = ttk.Button(self.top)
        self.button_play_script.place(x=305, y=138, height=24, width=60)
        photo_location = os.path.join(_location,"./icons/restart.png")
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.button_play_script.configure(image=_img2)
        self.button_play_script.configure(compound='center')
        self.button_play_script_tooltip = \
        ToolTip(self.button_play_script, '''Ctrl+ENTER''')

        self.entry_project_name = ttk.Entry(self.top)
        self.entry_project_name.place(x=60, y=8, height=25, width=177)
        self.entry_project_name.configure(font="-family {Arial} -size 9")
        self.entry_project_name.configure(cursor="xterm")

        self.Label7 = tk.Label(self.top)
        self.Label7.place(x=221, y=144, height=17, width=74)
        self.Label7.configure(activebackground="#d9d9d9")
        self.Label7.configure(activeforeground="black")
        self.Label7.configure(anchor='nw')
        self.Label7.configure(background="gray82")
        self.Label7.configure(compound='left')
        self.Label7.configure(disabledforeground="#9d9d9d")
        self.Label7.configure(font="-family {Segoe UI} -size 8")
        self.Label7.configure(foreground="black")
        self.Label7.configure(highlightbackground="gray82")
        self.Label7.configure(highlightcolor="black")
        self.Label7.configure(text='''Script editor''')

        self.entry_script_parameters = ttk.Entry(self.top)
        self.entry_script_parameters.place(x=571, y=139, height=25, width=369)
        self.entry_script_parameters.configure(font="-family {Arial} -size 9")
        self.entry_script_parameters.configure(cursor="xterm")

        self.Label6 = tk.Label(self.top)
        self.Label6.place(x=475, y=140, height=21, width=92)
        self.Label6.configure(activebackground="#d9d9d9")
        self.Label6.configure(activeforeground="black")
        self.Label6.configure(anchor='w')
        self.Label6.configure(background="gray82")
        self.Label6.configure(compound='left')
        self.Label6.configure(disabledforeground="#9d9d9d")
        self.Label6.configure(font="-family {Segoe UI} -size 8")
        self.Label6.configure(foreground="black")
        self.Label6.configure(highlightbackground="gray82")
        self.Label6.configure(highlightcolor="black")
        self.Label6.configure(text='''Parameters (-sp)''')

        self.Label5 = tk.Label(self.top)
        self.Label5.place(x=10, y=504, height=11, width=466)
        self.Label5.configure(activebackground="#d9d9d9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(anchor='w')
        self.Label5.configure(background="gray82")
        self.Label5.configure(compound='left')
        self.Label5.configure(disabledforeground="#9d9d9d")
        self.Label5.configure(font="-family {Segoe UI} -size 8")
        self.Label5.configure(foreground="black")
        self.Label5.configure(highlightbackground="gray82")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''Console output''')

        self.scrolledText_console = ScrolledText(self.top)
        self.scrolledText_console.place(x=10, y=520, height=153, width=932)
        self.scrolledText_console.configure(background="#444444")
        self.scrolledText_console.configure(font="-family {Courier New} -size 9")
        self.scrolledText_console.configure(foreground="black")
        self.scrolledText_console.configure(highlightbackground="#7d7d7d")
        self.scrolledText_console.configure(highlightcolor="black")
        self.scrolledText_console.configure(insertbackground="black")
        self.scrolledText_console.configure(insertborderwidth="3")
        self.scrolledText_console.configure(selectbackground="#797979")
        self.scrolledText_console.configure(selectforeground="black")
        self.scrolledText_console.configure(wrap="none")

        self.button_save_project = ttk.Button(self.top)
        self.button_save_project.place(x=357, y=9, height=24, width=49)
        photo_location = os.path.join(_location,"./icons/save.png")
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.button_save_project.configure(image=_img3)
        self.button_save_project.configure(compound='left')

        self.button_save_as_project = ttk.Button(self.top)
        self.button_save_as_project.place(x=300, y=8, height=24, width=49)
        self.button_save_as_project.configure(text='''...''')
        photo_location = os.path.join(_location,"./icons/save.png")
        global _img4
        _img4 = tk.PhotoImage(file=photo_location)
        self.button_save_as_project.configure(image=_img4)
        self.button_save_as_project.configure(compound='left')

        self.button_select_output = ttk.Button(self.top)
        self.button_select_output.place(x=300, y=69, height=24, width=49)
        photo_location = os.path.join(_location,"./icons/open.png")
        global _img5
        _img5 = tk.PhotoImage(file=photo_location)
        self.button_select_output.configure(image=_img5)
        self.button_select_output.configure(compound='center')

        self.label_output_status = tk.Label(self.top)
        self.label_output_status.place(x=180, y=93, height=21, width=191)
        self.label_output_status.configure(activebackground="#d9d9d9")
        self.label_output_status.configure(activeforeground="black")
        self.label_output_status.configure(anchor='w')
        self.label_output_status.configure(background="gray82")
        self.label_output_status.configure(compound='left')
        self.label_output_status.configure(disabledforeground="#9d9d9d")
        self.label_output_status.configure(font="-family {Segoe UI} -size 8")
        self.label_output_status.configure(foreground="#988e1f")
        self.label_output_status.configure(highlightbackground="gray82")
        self.label_output_status.configure(highlightcolor="black")
        self.label_output_status.configure(text='''Recording overwrite output file''')

        self.Label2 = tk.Label(self.top)
        self.Label2.place(x=10, y=120, height=16, width=53)
        self.Label2.configure(activebackground="#d9d9d9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(anchor='nw')
        self.Label2.configure(background="gray82")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#9d9d9d")
        self.Label2.configure(font="-family {Segoe UI} -size 8")
        self.Label2.configure(foreground="black")
        self.Label2.configure(highlightbackground="gray82")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Moshers''')

        self.button_reload_script_list = ttk.Button(self.top)
        self.button_reload_script_list.place(x=180, y=121, height=18, width=30)
        photo_location = os.path.join(_location,"./icons/refresh.png")
        global _img6
        _img6 = tk.PhotoImage(file=photo_location)
        self.button_reload_script_list.configure(image=_img6)
        self.button_reload_script_list.configure(compound='center')

        self.button_clone = ttk.Button(self.top)
        self.button_clone.place(x=108, y=121, height=18, width=27)
        photo_location = os.path.join(_location,"./icons/clone.png")
        global _img7
        _img7 = tk.PhotoImage(file=photo_location)
        self.button_clone.configure(image=_img7)
        self.button_clone.configure(compound='center')

        self.button_rename_script = ttk.Button(self.top)
        self.button_rename_script.place(x=145, y=121, height=18, width=27)
        photo_location = os.path.join(_location,"./icons/rename.png")
        global _img8
        _img8 = tk.PhotoImage(file=photo_location)
        self.button_rename_script.configure(image=_img8)
        self.button_rename_script.configure(compound='center')

        self.Labelframe1 = tk.LabelFrame(self.top)
        self.Labelframe1.place(x=572, y=8, height=111, width=366)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(font="-family {Arial} -size 9")
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(background="gray82")
        self.Labelframe1.configure(highlightbackground="gray82")
        self.Labelframe1.configure(highlightcolor="black")

        self.button_seek_1f = ttk.Button(self.Labelframe1)
        self.button_seek_1f.place(x=142, y=78, height=26, width=27
                , bordermode='ignore')
        self.button_seek_1f.configure(text='''+1f''')
        self.button_seek_1f.configure(compound='left')

        self.button_seek_back_2s = ttk.Button(self.Labelframe1)
        self.button_seek_back_2s.place(x=79, y=78, height=26, width=27
                , bordermode='ignore')
        self.button_seek_back_2s.configure(text='''-2s''')
        self.button_seek_back_2s.configure(compound='left')

        self.button_seek_2s = ttk.Button(self.Labelframe1)
        self.button_seek_2s.place(x=169, y=78, height=26, width=27
                , bordermode='ignore')
        self.button_seek_2s.configure(text='''+2s''')
        self.button_seek_2s.configure(compound='left')

        self.button_seek_10s = ttk.Button(self.Labelframe1)
        self.button_seek_10s.place(x=196, y=78, height=26, width=27
                , bordermode='ignore')
        self.button_seek_10s.configure(text='''+10s''')
        self.button_seek_10s.configure(compound='left')

        self.button_seek_back_10s = ttk.Button(self.Labelframe1)
        self.button_seek_back_10s.place(x=52, y=78, height=26, width=27
                , bordermode='ignore')
        self.button_seek_back_10s.configure(text='''-10s''')
        self.button_seek_back_10s.configure(compound='left')

        self.button_seek_back_10f = ttk.Button(self.Labelframe1)
        self.button_seek_back_10f.place(x=106, y=78, height=26, width=27
                , bordermode='ignore')
        self.button_seek_back_10f.configure(text='''-10f''')
        self.button_seek_back_10f.configure(compound='left')

        self.label_total_time = tk.Label(self.Labelframe1)
        self.label_total_time.place(x=271, y=58, height=19, width=85
                , bordermode='ignore')
        self.label_total_time.configure(activebackground="#d9d9d9")
        self.label_total_time.configure(activeforeground="black")
        self.label_total_time.configure(anchor='ne')
        self.label_total_time.configure(background="gray82")
        self.label_total_time.configure(compound='left')
        self.label_total_time.configure(disabledforeground="#9d9d9d")
        self.label_total_time.configure(font="-family {Segoe UI} -size 8")
        self.label_total_time.configure(foreground="black")
        self.label_total_time.configure(highlightbackground="gray82")
        self.label_total_time.configure(highlightcolor="black")
        self.label_total_time.configure(text='''00:01:12.80''')

        self.label_speed = tk.Label(self.Labelframe1)
        self.label_speed.place(x=331, y=78, height=25, width=27
                , bordermode='ignore')
        self.label_speed.configure(activebackground="#d9d9d9")
        self.label_speed.configure(activeforeground="black")
        self.label_speed.configure(anchor='w')
        self.label_speed.configure(background="gray82")
        self.label_speed.configure(compound='left')
        self.label_speed.configure(disabledforeground="#9d9d9d")
        self.label_speed.configure(font="-family {Segoe UI} -size 8")
        self.label_speed.configure(foreground="black")
        self.label_speed.configure(highlightbackground="gray82")
        self.label_speed.configure(highlightcolor="black")
        self.label_speed.configure(text='''10x''')

        self.scale_speed = ttk.Scale(self.Labelframe1, from_=0.1, to=4)
        self.scale_speed.place(x=247, y=85, height=13, width=79)
        self.scale_speed.configure(length="79")

        self.canvas_restart_mark = tk.Canvas(self.Labelframe1)
        self.canvas_restart_mark.place(x=257, y=41, height=19, width=2
                , bordermode='ignore')
        self.canvas_restart_mark.configure(background="gray82")
        self.canvas_restart_mark.configure(borderwidth="2")
        self.canvas_restart_mark.configure(highlightbackground="#2e2e2e")
        self.canvas_restart_mark.configure(highlightcolor="black")
        self.canvas_restart_mark.configure(insertbackground="black")
        self.canvas_restart_mark.configure(selectbackground="#d9d9d9")
        self.canvas_restart_mark.configure(selectforeground="black")

        self.label_progress = tk.Label(self.Labelframe1)
        self.label_progress.place(x=13, y=58, height=15, width=174
                , bordermode='ignore')
        self.label_progress.configure(activebackground="#d9d9d9")
        self.label_progress.configure(activeforeground="black")
        self.label_progress.configure(anchor='nw')
        self.label_progress.configure(background="gray82")
        self.label_progress.configure(disabledforeground="#9d9d9d")
        self.label_progress.configure(font="-family {Segoe UI} -size 8")
        self.label_progress.configure(foreground="black")
        self.label_progress.configure(highlightbackground="gray82")
        self.label_progress.configure(highlightcolor="black")
        self.label_progress.configure(text='''00:00:12.23''')

        self.button_play = ttk.Button(self.Labelframe1)
        self.button_play.place(x=16, y=8, height=26, width=93
                , bordermode='ignore')
        photo_location = os.path.join(_location,"./icons/play.png")
        global _img9
        _img9 = tk.PhotoImage(file=photo_location)
        self.button_play.configure(image=_img9)
        self.button_play.configure(compound='center')

        self.button_restart_video = ttk.Button(self.Labelframe1)
        self.button_restart_video.place(x=108, y=8, height=26, width=24
                , bordermode='ignore')
        photo_location = os.path.join(_location,"./icons/restart.png")
        global _img10
        _img10 = tk.PhotoImage(file=photo_location)
        self.button_restart_video.configure(image=_img10)
        self.button_restart_video.configure(compound='center')
        self.button_restart_video_tooltip = \
        ToolTip(self.button_restart_video, '''Restart''')

        self.button_lock_time = ttk.Button(self.Labelframe1)
        self.button_lock_time.place(x=16, y=78, height=26, width=20
                , bordermode='ignore')
        photo_location = os.path.join(_location,"./icons/restart_mark.png")
        global _img11
        _img11 = tk.PhotoImage(file=photo_location)
        self.button_lock_time.configure(image=_img11)
        self.button_lock_time.configure(compound='center')
        self.button_lock_time_tooltip = \
        ToolTip(self.button_lock_time, '''Set restart time''')

        self.button_record = ttk.Button(self.Labelframe1)
        self.button_record.place(x=257, y=8, height=26, width=93
                , bordermode='ignore')
        self.button_record.configure(text='''Record''')
        photo_location = os.path.join(_location,"./icons/record.png")
        global _img12
        _img12 = tk.PhotoImage(file=photo_location)
        self.button_record.configure(image=_img12)
        self.button_record.configure(compound='left')

        self.label_fps = tk.Label(self.Labelframe1)
        self.label_fps.place(x=143, y=7, height=18, width=55
                , bordermode='ignore')
        self.label_fps.configure(activebackground="#d9d9d9")
        self.label_fps.configure(activeforeground="black")
        self.label_fps.configure(anchor='w')
        self.label_fps.configure(background="gray82")
        self.label_fps.configure(compound='left')
        self.label_fps.configure(disabledforeground="#9d9d9d")
        self.label_fps.configure(font="-family {Segoe UI} -size 8")
        self.label_fps.configure(foreground="black")
        self.label_fps.configure(highlightbackground="gray82")
        self.label_fps.configure(highlightcolor="black")
        self.label_fps.configure(text='''FPS: 25''')

        self.scale_progress = ttk.Scale(self.Labelframe1, from_=0, to=1.0)
        self.scale_progress.place(x=17, y=43, height=13, width=335)
        self.scale_progress.configure(length="335")

        self.checkbutton_auto_rename = ttk.Checkbutton(self.top)
        self.checkbutton_auto_rename.place(x=59, y=93, width=124, height=21)
        self.checkbutton_auto_rename.configure(variable=self.is_auto_rename)
        self.checkbutton_auto_rename.configure(text='''Auto rename''')
        self.checkbutton_auto_rename.configure(compound='top')

        self.checkbutton_mute = ttk.Checkbutton(self.top)
        self.checkbutton_mute.place(x=882, y=119, width=60, height=21)
        self.checkbutton_mute.configure(variable=self.is_mute)
        self.checkbutton_mute.configure(text='''Mute''')
        self.checkbutton_mute.configure(compound='center')

        self.listbox_scripts = ScrolledListBox(self.top)
        self.listbox_scripts.place(x=10, y=140, height=355, width=199)
        self.listbox_scripts.configure(activestyle="none")
        self.listbox_scripts.configure(background="#eaeaea")
        self.listbox_scripts.configure(cursor="arrow")
        self.listbox_scripts.configure(disabledforeground="#9d9d9d")
        self.listbox_scripts.configure(exportselection="0")
        self.listbox_scripts.configure(font="-family {Arial} -size 10")
        self.listbox_scripts.configure(foreground="black")
        self.listbox_scripts.configure(highlightbackground="gray82")
        self.listbox_scripts.configure(highlightcolor="#d9d9d9")
        self.listbox_scripts.configure(selectbackground="#c9c9c9")
        self.listbox_scripts.configure(selectforeground="black")
        self.listbox_scripts.configure(selectmode='single')

from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, msg=None, msgFunc=None, delay=0.5,
                 follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        self.msg = tk.Message(self, textvariable=self.msgVar, bg=_bgcolor,
                   fg=_fgcolor, font="TkDefaultFont",
                   aspect=1000)
        self.msg.grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
    def configure(self, **kwargs):
        backgroundset = False
        foregroundset = False
        # Get the current tooltip text just in case the user doesn't provide any.
        current_text = self.msgVar.get()
        # to clear the tooltip text, use the .update method
        if 'debug' in kwargs.keys():
            debug = kwargs.pop('debug', False)
            if debug:
                for key, value in kwargs.items():
                    print(f'key: {key} - value: {value}')
        if 'background' in kwargs.keys():
            background = kwargs.pop('background')
            backgroundset = True
        if 'bg' in kwargs.keys():
            background = kwargs.pop('bg')
            backgroundset = True
        if 'foreground' in kwargs.keys():
            foreground = kwargs.pop('foreground')
            foregroundset = True
        if 'fg' in kwargs.keys():
            foreground = kwargs.pop('fg')
            foregroundset = True

        fontd = kwargs.pop('font', None)
        if 'text' in kwargs.keys():
            text = kwargs.pop('text')
            if (text == '') or (text == "\n"):
                text = current_text
            else:
                self.msgVar.set(text)
        reliefd = kwargs.pop('relief', 'flat')
        justifyd = kwargs.pop('justify', 'left')
        padxd = kwargs.pop('padx', 1)
        padyd = kwargs.pop('pady', 1)
        borderwidthd = kwargs.pop('borderwidth', 2)
        wid = self.msg      # The message widget which is the actual tooltip
        if backgroundset:
            wid.config(bg=background)
        if foregroundset:
            wid.config(fg=foreground)
        wid.config(font=fontd)
        wid.config(borderwidth=borderwidthd)
        wid.config(relief=reliefd)
        wid.config(justify=justifyd)
        wid.config(padx=padxd)
        wid.config(pady=padyd)
#                   End of Class ToolTip

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    LiveMosher1_support.main()

if __name__ == '__main__':
    LiveMosher1_support.main()




